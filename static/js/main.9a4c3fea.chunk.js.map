{"version":3,"sources":["classes/CanvasStore.ts","classes/Body.ts","components/Canvas.tsx","utils/getUniqueId.ts","components/Input.tsx","components/BodyButton.tsx","containers/CanvasContainer.tsx","containers/ToolsContainer.tsx","containers/BodyContainer.tsx","App.tsx","modules/index.ts","index.tsx"],"names":["CanvasStore","axesCanvas","undefined","axesCtx","canvas","ctx","bodies","hasAxes","origin","x","y","gridSize","lastUpdated","fps","animating","animationStarted","this","body","push","draw","forEach","animate","performance","now","dt","requestAnimationFrame","clearRect","width","height","update","reset","textShift","font","originShift","Math","floor","i","num","fillText","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","addText","instance","getInstance","GRAVITY","calcVelocity","v0","a","t","Rectangle","params","originalParams","rectangleParams","w","h","m","v","JSON","parse","stringify","fillStyle","fillRect","offset","Circle","circleParams","o","r","arc","PI","fill","styled","className","axesCanvasRef","useRef","canvasRef","useLayoutEffect","current","setCanvas","getContext","setContext","addAxes","ref","style","border","id","getUniqueId","prefix","bodyType","paramType","onChange","value","type","placeholder","getPlaceholder","step","e","parseFloat","target","required","htmlFor","getLabel","onClick","selected","props","canvasContainerRef","useState","curBodyType","setCurBodyType","setAnimating","inputs","setInputs","rectangle","circle","slope","line","spring","ground","useEffect","map","index","param","addBody","eraseAll","animateAll","App","combineReducers","store","createStore","reducer","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a4c3fea.chunk.js","sourcesContent":["import { start } from \"repl\";\nimport { IBody, Rectangle, Circle } from \"./Body\";\n\nclass CanvasStore {\n  private static instance: CanvasStore;\n  axesCanvas: HTMLCanvasElement | undefined = undefined;\n  axesCtx: CanvasRenderingContext2D | undefined = undefined;\n  canvas: HTMLCanvasElement | undefined = undefined;\n  ctx: CanvasRenderingContext2D | undefined = undefined;\n  bodies: Array<IBody> = [];\n  hasAxes: boolean = false;\n  origin = { x: 0, y: 0 };\n  gridSize = 1;\n  lastUpdated?: number;\n  fps = 58;\n  animating = false;\n  animationStarted = false;\n  private constructor() {}\n  static getInstance(): CanvasStore {\n    if (!CanvasStore.instance) CanvasStore.instance = new CanvasStore();\n    return CanvasStore.instance;\n  }\n  setCanvas(canvas: HTMLCanvasElement, axesCanvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.axesCanvas = axesCanvas;\n    this.hasAxes = false;\n  }\n  setContext(ctx: CanvasRenderingContext2D, axesCtx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n    this.axesCtx = axesCtx;\n  }\n  addBody(body: IBody) {\n    this.bodies.push(body);\n    body.draw();\n  }\n  draw() {\n    this.bodies.forEach((body: IBody) => body.draw());\n  }\n  animateAll() {\n    this.animating = true;\n    this.animate();\n  }\n  private animate() {\n    if (!this.animating) return;\n    if (!this.canvas || !this.ctx) return;\n    if (!this.lastUpdated) {\n      this.lastUpdated = performance.now();\n    }\n    const dt = (performance.now() - this.lastUpdated) / 1000;\n    this.lastUpdated = performance.now();\n    if (this.animationStarted) this.fps = 1 / dt;\n    else this.animationStarted = true;\n\n    requestAnimationFrame(() => this.animate());\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies.forEach((body: IBody) => body.update());\n  }\n  eraseAll() {\n    this.animating = false;\n    this.animationStarted = false;\n    this.lastUpdated = undefined;\n    if (!this.canvas || !this.ctx) return;\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies = [];\n  }\n  reset() {\n    this.animating = false;\n    this.animationStarted = false;\n    this.lastUpdated = undefined;\n    if (!this.canvas || !this.ctx) return;\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies.forEach((body: IBody) => {\n      body.reset();\n    });\n  }\n  private addText() {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    const textShift = { x: 3, y: 10 };\n    this.axesCtx.font = \"10px Aerial\";\n    const originShift = {\n      x: Math.floor(this.origin.x),\n      y: Math.floor(this.origin.y),\n    };\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = i - originShift.x;\n      this.axesCtx.fillText(\n        `${num}`,\n        i * this.gridSize + textShift.x,\n        this.origin.y * this.gridSize + textShift.y\n      );\n    }\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = originShift.y - i;\n      if (num === 0) continue;\n      this.axesCtx.fillText(\n        `${num}`,\n        this.origin.x * this.gridSize + textShift.x,\n        i * this.gridSize + textShift.y\n      );\n    }\n  }\n  addAxes(origin: { x: number; y: number }, gridSize: number) {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    this.origin = origin;\n    this.gridSize = gridSize;\n\n    // Draw regular grid lines\n    this.axesCtx.strokeStyle = \"#a6a6a6\";\n    this.axesCtx.lineWidth = 1;\n    this.axesCtx.beginPath();\n    for (let i = gridSize; i < this.axesCanvas.width; i += gridSize) {\n      if (i === origin.x * gridSize) continue;\n      this.axesCtx.moveTo(i, 0);\n      this.axesCtx.lineTo(i, this.axesCanvas.height);\n      this.axesCtx.stroke();\n    }\n    for (let i = gridSize; i < this.axesCanvas.height; i += gridSize) {\n      if (i === origin.y * gridSize) continue;\n      this.axesCtx.moveTo(0, i);\n      this.axesCtx.lineTo(this.axesCanvas.width, i);\n      this.axesCtx.stroke();\n    }\n    this.axesCtx.closePath();\n\n    // Draw axes\n    this.axesCtx.strokeStyle = \"#000000\";\n    this.axesCtx.beginPath();\n    this.axesCtx.moveTo(origin.x * gridSize, 0);\n    this.axesCtx.lineTo(origin.x * gridSize, this.axesCanvas.height);\n    this.axesCtx.stroke();\n    this.axesCtx.moveTo(0, origin.y * gridSize);\n    this.axesCtx.lineTo(this.axesCanvas.width, origin.y * gridSize);\n    this.axesCtx.stroke();\n    this.axesCtx.closePath();\n\n    this.addText();\n  }\n}\n\nexport default CanvasStore.getInstance();\n","import CanvasStore from \"./CanvasStore\";\n\nexport type BodyType =\n  | \"rectangle\"\n  | \"circle\"\n  | \"slope\"\n  | \"line\"\n  | \"spring\"\n  | \"ground\";\nexport type ParamType = \"x\" | \"y\" | \"o\" | \"w\" | \"h\" | \"r\" | \"m\" | \"v\" | \"a\";\nexport interface IBody {\n  ctx: CanvasRenderingContext2D;\n  originalParams: RectangleParams | CircleParams;\n  params: RectangleParams | CircleParams;\n  animating: boolean;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n}\nexport type Point = {\n  x: number;\n  y: number;\n};\n\nexport type Vector = {\n  x: number;\n  y: number;\n};\n\ntype BodyParams = {\n  v: Vector;\n  a: Vector;\n};\n\ntype RectangleParams = BodyParams & {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  m: number;\n};\n\ntype CircleParams = BodyParams & {\n  o: Point;\n  r: number;\n};\n\nconst GRAVITY: Vector = {\n  x: 0,\n  y: -9.80665,\n};\n\nconst calcVelocity = (v0: Vector, a: Vector, t: number): Vector => {\n  return {\n    x: v0.x + a.x * t,\n    y: v0.y + a.y * t,\n  };\n};\n\nexport class Rectangle implements IBody {\n  originalParams: RectangleParams;\n  params: RectangleParams;\n  animating: boolean = false;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    params: Record<ParamType, number | Point | Vector>\n  ) {\n    this.ctx = ctx;\n    const rectangleParams = {\n      x: params.x as number,\n      y: params.y as number,\n      w: params.w as number,\n      h: params.h as number,\n      m: params.m as number,\n      v: params.v as Vector,\n      a: params.a as Vector,\n    };\n    this.originalParams = JSON.parse(JSON.stringify(rectangleParams));\n    this.params = rectangleParams;\n    this.draw = () => {\n      let { x, y, w, h, m, v, a } = this.params;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      x = (x + origin.x) * gridSize;\n      y = (origin.y - y) * gridSize;\n      w *= gridSize;\n      h *= -gridSize;\n\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.fillRect(x, y, w, h);\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      if (this.params.y >= 0) {\n        const offset =\n          calcVelocity(this.params.v, GRAVITY, 1 / CanvasStore.fps).y /\n          CanvasStore.fps;\n        if (this.params.y + offset > 0) this.params.y += offset;\n        else this.params.y = 0;\n\n        this.params.v = calcVelocity(\n          this.params.v,\n          GRAVITY,\n          1 / CanvasStore.fps\n        );\n        // CanvasStore.time += 1 / CanvasStore.fps;\n      }\n      this.draw();\n    };\n    this.reset = () => {\n      this.params = JSON.parse(JSON.stringify(this.originalParams));\n      this.draw();\n    };\n  }\n}\n\nexport class Circle implements IBody {\n  originalParams: CircleParams;\n  params: CircleParams;\n  animating: boolean = false;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    params: Record<ParamType, number | Point | Vector>\n  ) {\n    this.ctx = ctx;\n    const circleParams = {\n      o: {\n        x: params.x as number,\n        y: params.y as number,\n      },\n      r: params.r as number,\n      m: params.m as number,\n      v: params.v as Vector,\n      a: params.a as Vector,\n    };\n    this.originalParams = JSON.parse(JSON.stringify(circleParams));\n    this.params = circleParams;\n    this.draw = () => {\n      let { o, r, v, a } = this.params;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      o = {\n        x: (o.x + origin.x) * gridSize,\n        y: (origin.y - o.y) * gridSize,\n      };\n      r *= gridSize;\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.arc(o.x, o.y, r, 0, 2 * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      if (this.params.o.y - this.params.r >= 0) {\n        const offset =\n          calcVelocity(this.params.v, GRAVITY, 1 / CanvasStore.fps).y /\n          CanvasStore.fps;\n        if (this.params.o.y - this.params.r + offset > 0)\n          this.params.o.y += offset;\n        else this.params.o.y = this.params.r;\n\n        this.params.v = calcVelocity(\n          this.params.v,\n          GRAVITY,\n          1 / CanvasStore.fps\n        );\n        // CanvasStore.time += 1 / CanvasStore.fps;\n      }\n      this.draw();\n    };\n    this.reset = () => {\n      this.params = JSON.parse(JSON.stringify(this.originalParams));\n      this.draw();\n    };\n  }\n}\n","import React, { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\n\ntype CanvasProps = {\n  className?: string;\n  width: number;\n  height: number;\n  origin: {\n    x: number;\n    y: number;\n  };\n  gridSize: number;\n};\n\nconst Canvas: React.FC<CanvasProps> = ({\n  className,\n  width,\n  height = 750,\n  origin = { x: 0, y: 0 },\n  gridSize = 25,\n}) => {\n  const axesCanvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useLayoutEffect(() => {\n    if (\n      !axesCanvasRef ||\n      !axesCanvasRef.current ||\n      !canvasRef ||\n      !canvasRef.current\n    )\n      return;\n    CanvasStore.setCanvas(canvasRef.current, axesCanvasRef.current);\n    const ctx = canvasRef.current.getContext(\"2d\");\n    const axesCtx = axesCanvasRef.current.getContext(\"2d\");\n    if (axesCtx && ctx) {\n      CanvasStore.setContext(ctx, axesCtx);\n      CanvasStore.addAxes(origin, gridSize);\n    }\n  }, [axesCanvasRef, canvasRef]);\n  return (\n    <div className={className}>\n      <canvas\n        className=\"body-canvas\"\n        width={width}\n        height={height}\n        ref={canvasRef}\n      />\n      <canvas\n        className=\"axes-canvas\"\n        width={width}\n        height={height}\n        style={{\n          border: \"1px solid black\",\n        }}\n        ref={axesCanvasRef}\n      />\n    </div>\n  );\n};\n\nexport default styled(Canvas)`\n  position: relative;\n  canvas {\n    position: absolute;\n  }\n`;\n","let id = 0;\nconst getUniqueId = (prefix: string) => `${prefix}-${id++}`;\n\nexport default getUniqueId;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BodyType, ParamType, Point, Vector } from \"../classes/Body\";\nimport getUniqueId from \"../utils/getUniqueId\";\n\ntype InputProps = {\n  className?: string;\n  bodyType: BodyType;\n  paramType: ParamType;\n  onChange: (paramType: ParamType, value: number) => void;\n  value: number;\n};\n\nconst Input: React.FC<InputProps> = ({\n  className,\n  bodyType,\n  paramType,\n  onChange,\n  value,\n}) => {\n  const id = getUniqueId(\"input\");\n  const getPlaceholder = () => {\n    switch (paramType) {\n      case \"x\":\n      case \"y\":\n        return bodyType == \"circle\" ? `${paramType} of origin` : paramType;\n      case \"w\":\n        return \"width\";\n      case \"h\":\n        return \"height\";\n      case \"r\":\n        return \"radius\";\n      case \"m\":\n        return \"mass\";\n      default:\n        return \"\";\n    }\n  };\n  const getLabel = () => {\n    switch (paramType) {\n      case \"w\":\n      case \"h\":\n      case \"r\":\n        return \"m\";\n      case \"m\":\n        return \"kg\";\n      default:\n        return \"--\";\n    }\n  };\n  return (\n    <div className={className}>\n      <input\n        id={id}\n        type=\"number\"\n        placeholder={getPlaceholder()}\n        step={0.1}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          onChange(paramType, parseFloat(e.target.value));\n        }}\n        value={value}\n        required\n      />\n      <label htmlFor={id}>{getLabel()}</label>\n    </div>\n  );\n};\n\nexport default styled(Input)`\n  position: relative;\n  display: flex;\n  input {\n    width: 100%;\n    padding: 0.25rem 1.5rem 0.25rem 0.5rem;\n  }\n  label {\n    position: absolute;\n    top: 50%;\n    right: 0.5rem;\n    transform: translateY(-50%);\n    font-family: sans-serif;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BodyType } from \"../classes/Body\";\n\ntype BodyButtonProps = {\n  className?: string;\n  bodyType: BodyType;\n  onClick: (bodyType: BodyType) => void;\n  selected: boolean;\n};\n\nconst BodyButton: React.FC<BodyButtonProps> = ({\n  className,\n  bodyType,\n  onClick,\n  selected,\n}) => {\n  return (\n    <button\n      className={className}\n      onClick={() => {\n        onClick(bodyType);\n      }}\n    >\n      {bodyType}\n    </button>\n  );\n};\n\nexport default styled(BodyButton)`\n  padding: 0.25rem;\n  border: 1px solid ${props => (props.selected ? \"red\" : \"black\")};\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    background-color: #e5e5e5;\n  }\n`;\n","import React, { useRef, useState } from \"react\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport { Canvas } from \"../components\";\nimport styled from \"styled-components\";\n\ntype CanvasContainerProps = {\n  className?: string;\n};\n\nconst CanvasContainer: React.FC<CanvasContainerProps> = ({ className }) => {\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const canvasProps = {\n    width: 750,\n    height: 750,\n    origin: {\n      x: 5,\n      y: 25,\n    },\n    gridSize: 25,\n  };\n\n  return (\n    <div id=\"canvas-container\" className={className} ref={canvasContainerRef}>\n      <Canvas {...canvasProps} />\n    </div>\n  );\n};\n\nexport default styled(CanvasContainer)`\n  width: 752px;\n  height: 752px;\n  overflow: hidden;\n  .btn-container {\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport CanvasStore from \"../classes/CanvasStore\";\nimport { Input, BodyButton } from \"../components\";\nimport {\n  BodyType,\n  ParamType,\n  Point,\n  Vector,\n  Rectangle,\n  Circle,\n} from \"../classes/Body\";\n\ntype ToolsContainerProps = {\n  className?: string;\n};\n\nconst ToolsContainer: React.FC<ToolsContainerProps> = ({ className }) => {\n  const [curBodyType, setCurBodyType] = useState<BodyType>(\"rectangle\");\n  const [animating, setAnimating] = useState(false);\n  const inputsInitialState = {\n    x: 0,\n    y: 0,\n    o: {\n      x: 0,\n      y: 0,\n    },\n    w: 0,\n    h: 0,\n    r: 0,\n    m: 0,\n    v: { x: 0, y: 0 },\n    a: { x: 0, y: 0 },\n  };\n  const [inputs, setInputs] = useState<\n    Record<ParamType, number | Point | Vector>\n  >(inputsInitialState);\n  const bodyTypes: BodyType[] = [\n    \"rectangle\",\n    \"circle\",\n    \"slope\",\n    \"line\",\n    \"spring\",\n    \"ground\",\n  ];\n  const params: Record<BodyType, ParamType[]> = {\n    rectangle: [\"x\", \"y\", \"w\", \"h\", \"m\", \"v\", \"a\"],\n    circle: [\"x\", \"y\", \"r\", \"m\", \"v\", \"a\"],\n    slope: [],\n    line: [],\n    spring: [],\n    ground: [],\n  };\n  const onClick = (bodyType: BodyType) => {\n    setCurBodyType(bodyType);\n  };\n  const onChange = (paramType: ParamType, value: number) => {\n    setInputs((inputs: Record<ParamType, number | Point | Vector>) => ({\n      ...inputs,\n      [paramType]: value,\n    }));\n  };\n  const onDraw = () => {\n    const ctx = CanvasStore.ctx;\n    if (ctx) {\n      switch (curBodyType) {\n        case \"rectangle\":\n          CanvasStore.addBody(new Rectangle(ctx, inputs));\n          break;\n        case \"circle\":\n          CanvasStore.addBody(new Circle(ctx, inputs));\n          break;\n        default:\n          break;\n      }\n    }\n  };\n  const onAnimate = () => {\n    CanvasStore.animateAll();\n    setAnimating(true);\n    // setActive(true);\n  };\n  const onEraseAll = () => {\n    CanvasStore.eraseAll();\n  };\n  const onReset = () => {\n    CanvasStore.reset();\n    setAnimating(false);\n  };\n  useEffect(() => {}, []);\n  return (\n    <div className={className}>\n      <div className=\"buttons-container\">\n        {bodyTypes.map((bodyType: BodyType, index: number) => (\n          <BodyButton\n            key={index}\n            bodyType={bodyType}\n            onClick={onClick}\n            selected={curBodyType === bodyType ? true : false}\n          />\n        ))}\n      </div>\n      <div className=\"inputs-container\">\n        {params[curBodyType] &&\n          params[curBodyType].map((param: ParamType, index: number) => (\n            <Input\n              key={index}\n              bodyType={curBodyType}\n              paramType={param}\n              onChange={onChange}\n              value={inputs[param] as number}\n            />\n          ))}\n      </div>\n      <div className=\"actions-container\">\n        <button className=\"actions-btn\" onClick={onDraw}>\n          Draw\n        </button>\n        <button className=\"actions-btn\" onClick={onEraseAll}>\n          Erase All\n        </button>\n        <button\n          className=\"actions-btn\"\n          onClick={animating ? onReset : onAnimate}\n        >\n          {animating ? \"Reset\" : \"Animate\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default styled(ToolsContainer)`\n  margin-left: 1rem;\n  border: 1px solid #e9e9e9;\n  width: 20rem;\n  height: 752px;\n  padding: 1rem;\n  .buttons-container {\n    display: grid;\n    grid-gap: 0.5rem;\n    grid-template-columns: repeat(2, 1fr);\n    margin-bottom: 1rem;\n  }\n  .inputs-container {\n    display: grid;\n    grid-gap: 0.5rem;\n    grid-template-columns: repeat(2, 1fr);\n    margin-bottom: 1rem;\n  }\n  .actions-container {\n    display: grid;\n    grid-gap: 0.5rem;\n    grid-template-columns: repeat(2, 1fr);\n    button {\n      padding: 0.25rem;\n    }\n    button:last-child {\n      grid-column: 1 / 3;\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport CanvasContainer from \"./CanvasContainer\";\nimport ToolsContainer from \"./ToolsContainer\";\n\ntype BodyContainerProps = {\n  className?: string;\n};\n\nconst BodyContainer: React.FC<BodyContainerProps> = ({ className }) => {\n  const [time, setTime] = useState(0);\n  const [active, setActive] = useState(false);\n  return (\n    <div className={className}>\n      <div className=\"top-container\">\n        <CanvasContainer />\n        <ToolsContainer />\n      </div>\n    </div>\n  );\n};\n\nexport default styled(BodyContainer)`\n  display: flex;\n  flex-direction: column;\n  min-width: 1200px;\n  padding: 2rem;\n  .top-container {\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import React from \"react\";\nimport { BodyContainer, ToolsContainer } from \"./containers\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nexport default combineReducers({});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./modules\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}