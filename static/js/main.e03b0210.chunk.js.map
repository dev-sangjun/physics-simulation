{"version":3,"sources":["classes/CanvasStore.ts","classes/Body.ts","components/Canvas.tsx","utils/getUniqueId.ts","components/Input.tsx","containers/CanvasContainer.tsx","containers/ToolsContainer.tsx","containers/BodyContainer.tsx","App.tsx","modules/index.ts","index.tsx"],"names":["CanvasStore","axesCanvas","undefined","axesCtx","canvas","ctx","bodies","hasAxes","origin","x","y","gridSize","lastUpdated","fps","animationStarted","time","this","body","push","draw","performance","now","dt","requestAnimationFrame","animate","clearRect","width","height","forEach","update","textShift","font","originShift","Math","floor","i","num","fillText","console","log","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","addText","instance","getInstance","GRAVITY","calcVelocity","v0","a","t","Rectangle","params","w","h","m","v","fillStyle","fillRect","offset","styled","className","axesCanvasRef","useRef","canvasRef","useLayoutEffect","current","setCanvas","getContext","setContext","addAxes","ref","style","border","id","getUniqueId","prefix","placeholder","inputType","htmlFor","getLabel","canvasContainerRef","onClick","addBody","App","combineReducers","store","createStore","reducer","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e03b0210.chunk.js","sourcesContent":["import { start } from \"repl\";\nimport { IBody, Rectangle, Circle } from \"./Body\";\n\nclass CanvasStore {\n  private static instance: CanvasStore;\n  axesCanvas: HTMLCanvasElement | undefined = undefined;\n  axesCtx: CanvasRenderingContext2D | undefined = undefined;\n  canvas: HTMLCanvasElement | undefined = undefined;\n  ctx: CanvasRenderingContext2D | undefined = undefined;\n  bodies: Array<IBody> = [];\n  hasAxes: boolean = false;\n  origin = { x: 0, y: 0 };\n  gridSize = 1;\n  lastUpdated?: number;\n  fps = 58;\n  animationStarted = false;\n  time = 0;\n  private constructor() {}\n  static getInstance(): CanvasStore {\n    if (!CanvasStore.instance) CanvasStore.instance = new CanvasStore();\n    return CanvasStore.instance;\n  }\n  setCanvas(canvas: HTMLCanvasElement, axesCanvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.axesCanvas = axesCanvas;\n    this.hasAxes = false;\n  }\n  setContext(ctx: CanvasRenderingContext2D, axesCtx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n    this.axesCtx = axesCtx;\n  }\n  addBody(body: IBody) {\n    this.bodies.push(body);\n    body.draw();\n  }\n  animate() {\n    if (!this.canvas || !this.ctx) return;\n    if (!this.lastUpdated) {\n      this.lastUpdated = performance.now();\n    }\n    const dt = (performance.now() - this.lastUpdated) / 1000;\n    this.lastUpdated = performance.now();\n    if (this.animationStarted) this.fps = 1 / dt;\n    else this.animationStarted = true;\n\n    requestAnimationFrame(() => this.animate());\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies.forEach((body: IBody) => body.update());\n  }\n  private addText() {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    const textShift = { x: 3, y: 10 };\n    this.axesCtx.font = \"10px Aerial\";\n    const originShift = {\n      x: Math.floor(this.origin.x),\n      y: Math.floor(this.origin.y),\n    };\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = i - originShift.x;\n      this.axesCtx.fillText(\n        `${num}`,\n        i * this.gridSize + textShift.x,\n        this.origin.y * this.gridSize + textShift.y\n      );\n    }\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = originShift.y - i;\n      if (num === 0) continue;\n      this.axesCtx.fillText(\n        `${num}`,\n        this.origin.x * this.gridSize + textShift.x,\n        i * this.gridSize + textShift.y\n      );\n    }\n  }\n  addAxes(origin: { x: number; y: number }, gridSize: number) {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    this.origin = origin;\n    this.gridSize = gridSize;\n\n    console.log(gridSize);\n    // Draw regular grid lines\n    this.axesCtx.strokeStyle = \"#a6a6a6\";\n    this.axesCtx.lineWidth = 1;\n    this.axesCtx.beginPath();\n    for (let i = gridSize; i < this.axesCanvas.width; i += gridSize) {\n      if (i === origin.x * gridSize) continue;\n      this.axesCtx.moveTo(i, 0);\n      this.axesCtx.lineTo(i, this.axesCanvas.height);\n      this.axesCtx.stroke();\n    }\n    for (let i = gridSize; i < this.axesCanvas.height; i += gridSize) {\n      if (i === origin.y * gridSize) continue;\n      this.axesCtx.moveTo(0, i);\n      this.axesCtx.lineTo(this.axesCanvas.width, i);\n      this.axesCtx.stroke();\n    }\n    this.axesCtx.closePath();\n\n    // Draw axes\n    this.axesCtx.strokeStyle = \"#000000\";\n    this.axesCtx.beginPath();\n    this.axesCtx.moveTo(origin.x * gridSize, 0);\n    this.axesCtx.lineTo(origin.x * gridSize, this.axesCanvas.height);\n    this.axesCtx.stroke();\n    this.axesCtx.moveTo(0, origin.y * gridSize);\n    this.axesCtx.lineTo(this.axesCanvas.width, origin.y * gridSize);\n    this.axesCtx.stroke();\n    this.axesCtx.closePath();\n\n    this.addText();\n  }\n}\n\nexport default CanvasStore.getInstance();\n","import CanvasStore from \"./CanvasStore\";\n\nexport interface IBody {\n  ctx: CanvasRenderingContext2D;\n  params: RectangleParams | CircleParams;\n  draw: () => void;\n  update: () => void;\n}\n\ntype Vector = {\n  x: number;\n  y: number;\n};\n\ntype BodyParams = {\n  v: Vector;\n  a: Vector;\n};\n\ntype RectangleParams = BodyParams & {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  m: number;\n};\n\ntype CircleParams = BodyParams & {\n  o: {\n    x: number;\n    y: number;\n  };\n  r: number;\n};\n\nconst GRAVITY: Vector = {\n  x: 0,\n  y: -9.8,\n};\n\nconst calcVelocity = (v0: Vector, a: Vector, t: number): Vector => {\n  return {\n    x: v0.x + a.x * t,\n    y: v0.y + a.y * t,\n  };\n};\n\nexport class Rectangle implements IBody {\n  draw: () => void;\n  update: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public params: RectangleParams\n  ) {\n    this.ctx = ctx;\n    this.params = params;\n    this.draw = () => {\n      let { x, y, w, h, m, v, a } = this.params as RectangleParams;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      x = (x + origin.x) * gridSize;\n      y = (origin.y - y) * gridSize;\n      w *= gridSize;\n      h *= -gridSize;\n\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.fillRect(x, y, w, h);\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      if (this.params.y >= 0) {\n        const offset =\n          calcVelocity(this.params.v, GRAVITY, 1 / CanvasStore.fps).y /\n          CanvasStore.fps;\n        if (this.params.y + offset > 0) this.params.y += offset;\n        else this.params.y = 0;\n\n        this.params.v = calcVelocity(\n          this.params.v,\n          GRAVITY,\n          1 / CanvasStore.fps\n        );\n        CanvasStore.time += 1 / CanvasStore.fps;\n      }\n      this.draw();\n    };\n  }\n}\n\nexport class Circle implements IBody {\n  draw: () => void;\n  update: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public params: CircleParams\n  ) {\n    this.ctx = ctx;\n    this.params = params;\n    this.draw = () => {\n      let { o, r, v, a } = this.params as CircleParams;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      o = {\n        x: (o.x + origin.x) * gridSize,\n        y: (origin.y - o.y) * gridSize,\n      };\n      r *= gridSize;\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.arc(o.x, o.y, r, 0, 2 * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      this.params.o.y -= 0.1;\n      this.draw();\n    };\n  }\n}\n","import React, { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\n\ntype CanvasProps = {\n  className?: string;\n  width: number;\n  height: number;\n  origin: {\n    x: number;\n    y: number;\n  };\n  gridSize: number;\n};\n\nconst Canvas: React.FC<CanvasProps> = ({\n  className,\n  width,\n  height = 750,\n  origin = { x: 0, y: 0 },\n  gridSize = 25,\n}) => {\n  const axesCanvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useLayoutEffect(() => {\n    if (\n      !axesCanvasRef ||\n      !axesCanvasRef.current ||\n      !canvasRef ||\n      !canvasRef.current\n    )\n      return;\n    CanvasStore.setCanvas(canvasRef.current, axesCanvasRef.current);\n    const ctx = canvasRef.current.getContext(\"2d\");\n    const axesCtx = axesCanvasRef.current.getContext(\"2d\");\n    if (axesCtx && ctx) {\n      CanvasStore.setContext(ctx, axesCtx);\n      CanvasStore.addAxes(origin, gridSize);\n    }\n  }, [axesCanvasRef, canvasRef]);\n  return (\n    <div className={className}>\n      <canvas\n        className=\"body-canvas\"\n        width={width}\n        height={height}\n        ref={canvasRef}\n      />\n      <canvas\n        className=\"axes-canvas\"\n        width={width}\n        height={height}\n        style={{\n          border: \"1px solid black\",\n        }}\n        ref={axesCanvasRef}\n      />\n    </div>\n  );\n};\n\nexport default styled(Canvas)`\n  position: relative;\n  canvas {\n    position: absolute;\n  }\n`;\n","let id = 0;\nconst getUniqueId = (prefix: string) => `${prefix}-${id++}`;\n\nexport default getUniqueId;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport getUniqueId from \"../utils/getUniqueId\";\n\ntype InputType =\n  | \"x\"\n  | \"y\"\n  | \"w\"\n  | \"h\"\n  | \"r\"\n  | \"mass\"\n  | \"friction\"\n  | \"spring\"\n  | \"moment of inertia\";\n\ntype InputProps = {\n  className?: string;\n  placeholder?: string;\n  inputType: InputType;\n};\n\nconst Input: React.FC<InputProps> = ({ className, placeholder, inputType }) => {\n  const id = getUniqueId(\"input\");\n  const getLabel = () => {\n    switch (inputType) {\n      case \"w\":\n      case \"h\":\n      case \"r\":\n        return \"m\";\n      case \"mass\":\n        return \"kg\";\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <div className={className}>\n      <input id={id} placeholder={placeholder}></input>\n      <label htmlFor={id}>{getLabel()}</label>\n    </div>\n  );\n};\n\nexport default styled(Input)`\n  position: relative;\n  display: flex;\n  input {\n    width: 100%;\n    padding: 0 1.5rem 0 0.5rem;\n  }\n  label {\n    position: absolute;\n    top: 50%;\n    right: 0.5rem;\n    transform: translateY(-50%);\n    font-family: sans-serif;\n  }\n`;\n","import React, { useRef, useState } from \"react\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport { Canvas } from \"../components\";\nimport styled from \"styled-components\";\n\ntype CanvasContainerProps = {\n  className?: string;\n};\n\nconst CanvasContainer: React.FC<CanvasContainerProps> = ({ className }) => {\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const canvasProps = {\n    width: 750,\n    height: 750,\n    origin: {\n      x: 5,\n      y: 25,\n    },\n    gridSize: 25,\n  };\n\n  return (\n    <div id=\"canvas-container\" className={className} ref={canvasContainerRef}>\n      <Canvas {...canvasProps} />\n    </div>\n  );\n};\n\nexport default styled(CanvasContainer)`\n  width: 752px;\n  height: 752px;\n  overflow: hidden;\n  .btn-container {\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Input } from \"../components\";\n\ntype ToolsContainerProps = {\n  className?: string;\n};\n\nconst ToolsContainer: React.FC<ToolsContainerProps> = ({ className }) => {\n  return (\n    <div className={className}>\n      <div className=\"buttons-container\"></div>\n      <div className=\"inputs-container\">\n        <Input placeholder=\"x\" inputType=\"x\" />\n        <Input placeholder=\"y\" inputType=\"y\" />\n        <Input placeholder=\"width\" inputType=\"w\" />\n        <Input placeholder=\"height\" inputType=\"h\" />\n        <Input placeholder=\"mass\" inputType=\"mass\" />\n      </div>\n    </div>\n  );\n};\n\nexport default styled(ToolsContainer)`\n  margin-left: 1rem;\n  border: 1px solid #e9e9e9;\n  width: 20rem;\n  height: 752px;\n  padding: 1rem;\n  .inputs-container {\n    display: grid;\n    grid-gap: 0.5rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport CanvasContainer from \"./CanvasContainer\";\nimport ToolsContainer from \"./ToolsContainer\";\n\ntype BodyContainerProps = {\n  className?: string;\n};\n\nconst BodyContainer: React.FC<BodyContainerProps> = ({ className }) => {\n  const onClick = () => {\n    const ctx = CanvasStore.ctx;\n    if (ctx) {\n      CanvasStore.addBody(\n        new Rectangle(ctx, {\n          x: 0,\n          y: 20,\n          w: 2,\n          h: 2,\n          m: 1,\n          v: { x: 0, y: 0 },\n          a: { x: 0, y: 0 },\n        })\n      );\n      // CanvasStore.addBody(\n      //   new Circle(ctx, {\n      //     o: {\n      //       x: 0,\n      //       y: 0,\n      //     },\n      //     r: 5,\n      //     v: { x: 0, y: 0 },\n      //     a: { x: 0, y: 0 },\n      //   })\n      // );\n    }\n  };\n  const onAnimate = () => {\n    CanvasStore.animate();\n  };\n  return (\n    <div className={className}>\n      <div className=\"top-container\">\n        <CanvasContainer />\n        <ToolsContainer />\n      </div>\n      <div className=\"btm-container\">\n        <button onClick={onClick}>Draw</button>\n        <button onClick={onAnimate}>Animate</button>\n      </div>\n    </div>\n  );\n};\n\nexport default styled(BodyContainer)`\n  display: flex;\n  flex-direction: column;\n  min-width: 1200px;\n  padding: 2rem;\n  .top-container {\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import React from \"react\";\nimport { BodyContainer, ToolsContainer } from \"./containers\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nexport default combineReducers({});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./modules\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}