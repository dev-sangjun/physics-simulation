{"version":3,"sources":["classes/CanvasStore.ts","classes/Body.ts","components/Canvas.tsx","utils/getUniqueId.ts","components/Input.tsx","containers/CanvasContainer.tsx","containers/ToolsContainer.tsx","containers/BodyContainer.tsx","App.tsx","modules/index.ts","index.tsx"],"names":["CanvasStore","axesCanvas","undefined","axesCtx","canvas","ctx","bodies","hasAxes","origin","x","y","gridSize","lastUpdated","fps","animationStarted","time","resetCanvas","this","body","push","draw","performance","now","dt","requestAnimationFrame","animate","clearRect","width","height","forEach","update","textShift","font","originShift","Math","floor","i","num","fillText","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","addText","instance","getInstance","GRAVITY","calcVelocity","v0","a","t","Rectangle","params","originalParams","reset","w","h","m","v","fillStyle","fillRect","offset","styled","className","axesCanvasRef","useRef","canvasRef","useLayoutEffect","current","setCanvas","getContext","setContext","addAxes","ref","style","border","id","getUniqueId","prefix","placeholder","inputType","htmlFor","getLabel","canvasContainerRef","useState","onClick","addBody","App","combineReducers","store","createStore","reducer","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfa9a007.chunk.js","sourcesContent":["import { start } from \"repl\";\nimport { IBody, Rectangle, Circle } from \"./Body\";\n\nclass CanvasStore {\n  private static instance: CanvasStore;\n  axesCanvas: HTMLCanvasElement | undefined = undefined;\n  axesCtx: CanvasRenderingContext2D | undefined = undefined;\n  canvas: HTMLCanvasElement | undefined = undefined;\n  ctx: CanvasRenderingContext2D | undefined = undefined;\n  bodies: Array<IBody> = [];\n  hasAxes: boolean = false;\n  origin = { x: 0, y: 0 };\n  gridSize = 1;\n  lastUpdated?: number;\n  fps = 58;\n  animationStarted = false;\n  time = 0;\n  resetCanvas = false;\n  private constructor() {}\n  static getInstance(): CanvasStore {\n    if (!CanvasStore.instance) CanvasStore.instance = new CanvasStore();\n    return CanvasStore.instance;\n  }\n  setCanvas(canvas: HTMLCanvasElement, axesCanvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    this.axesCanvas = axesCanvas;\n    this.hasAxes = false;\n  }\n  setContext(ctx: CanvasRenderingContext2D, axesCtx: CanvasRenderingContext2D) {\n    this.ctx = ctx;\n    this.axesCtx = axesCtx;\n  }\n  addBody(body: IBody) {\n    this.bodies.push(body);\n    body.draw();\n    this.resetCanvas = false;\n  }\n  animate() {\n    if (this.resetCanvas) return;\n    if (!this.canvas || !this.ctx) return;\n    if (!this.lastUpdated) {\n      this.lastUpdated = performance.now();\n    }\n    const dt = (performance.now() - this.lastUpdated) / 1000;\n    this.lastUpdated = performance.now();\n    if (this.animationStarted) this.fps = 1 / dt;\n    else this.animationStarted = true;\n\n    requestAnimationFrame(() => this.animate());\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies.forEach((body: IBody) => body.update());\n  }\n  reset() {\n    this.resetCanvas = true;\n    this.animationStarted = false;\n    if (!this.canvas || !this.ctx) return;\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.bodies = [];\n  }\n  private addText() {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    const textShift = { x: 3, y: 10 };\n    this.axesCtx.font = \"10px Aerial\";\n    const originShift = {\n      x: Math.floor(this.origin.x),\n      y: Math.floor(this.origin.y),\n    };\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = i - originShift.x;\n      this.axesCtx.fillText(\n        `${num}`,\n        i * this.gridSize + textShift.x,\n        this.origin.y * this.gridSize + textShift.y\n      );\n    }\n    for (let i = 0; i < this.axesCanvas.width; i++) {\n      const num = originShift.y - i;\n      if (num === 0) continue;\n      this.axesCtx.fillText(\n        `${num}`,\n        this.origin.x * this.gridSize + textShift.x,\n        i * this.gridSize + textShift.y\n      );\n    }\n  }\n  addAxes(origin: { x: number; y: number }, gridSize: number) {\n    if (!this.axesCanvas || !this.axesCtx) return;\n    this.origin = origin;\n    this.gridSize = gridSize;\n\n    // Draw regular grid lines\n    this.axesCtx.strokeStyle = \"#a6a6a6\";\n    this.axesCtx.lineWidth = 1;\n    this.axesCtx.beginPath();\n    for (let i = gridSize; i < this.axesCanvas.width; i += gridSize) {\n      if (i === origin.x * gridSize) continue;\n      this.axesCtx.moveTo(i, 0);\n      this.axesCtx.lineTo(i, this.axesCanvas.height);\n      this.axesCtx.stroke();\n    }\n    for (let i = gridSize; i < this.axesCanvas.height; i += gridSize) {\n      if (i === origin.y * gridSize) continue;\n      this.axesCtx.moveTo(0, i);\n      this.axesCtx.lineTo(this.axesCanvas.width, i);\n      this.axesCtx.stroke();\n    }\n    this.axesCtx.closePath();\n\n    // Draw axes\n    this.axesCtx.strokeStyle = \"#000000\";\n    this.axesCtx.beginPath();\n    this.axesCtx.moveTo(origin.x * gridSize, 0);\n    this.axesCtx.lineTo(origin.x * gridSize, this.axesCanvas.height);\n    this.axesCtx.stroke();\n    this.axesCtx.moveTo(0, origin.y * gridSize);\n    this.axesCtx.lineTo(this.axesCanvas.width, origin.y * gridSize);\n    this.axesCtx.stroke();\n    this.axesCtx.closePath();\n\n    this.addText();\n  }\n}\n\nexport default CanvasStore.getInstance();\n","import CanvasStore from \"./CanvasStore\";\n\nexport interface IBody {\n  ctx: CanvasRenderingContext2D;\n  originalParams: RectangleParams | CircleParams;\n  params: RectangleParams | CircleParams;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n}\n\ntype Vector = {\n  x: number;\n  y: number;\n};\n\ntype BodyParams = {\n  v: Vector;\n  a: Vector;\n};\n\ntype RectangleParams = BodyParams & {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  m: number;\n};\n\ntype CircleParams = BodyParams & {\n  o: {\n    x: number;\n    y: number;\n  };\n  r: number;\n};\n\nconst GRAVITY: Vector = {\n  x: 0,\n  y: -9.80665,\n};\n\nconst calcVelocity = (v0: Vector, a: Vector, t: number): Vector => {\n  return {\n    x: v0.x + a.x * t,\n    y: v0.y + a.y * t,\n  };\n};\n\nexport class Rectangle implements IBody {\n  originalParams: RectangleParams;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public params: RectangleParams\n  ) {\n    this.ctx = ctx;\n    this.originalParams = params;\n    this.params = params;\n    this.draw = () => {\n      let { x, y, w, h, m, v, a } = this.params as RectangleParams;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      x = (x + origin.x) * gridSize;\n      y = (origin.y - y) * gridSize;\n      w *= gridSize;\n      h *= -gridSize;\n\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.fillRect(x, y, w, h);\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      if (this.params.y >= 0) {\n        const offset =\n          calcVelocity(this.params.v, GRAVITY, 1 / CanvasStore.fps).y /\n          CanvasStore.fps;\n        if (this.params.y + offset > 0) this.params.y += offset;\n        else this.params.y = 0;\n\n        this.params.v = calcVelocity(\n          this.params.v,\n          GRAVITY,\n          1 / CanvasStore.fps\n        );\n        CanvasStore.time += 1 / CanvasStore.fps;\n      }\n      this.draw();\n    };\n    this.reset = () => {\n      this.params = this.originalParams;\n    };\n  }\n}\n\nexport class Circle implements IBody {\n  originalParams: CircleParams;\n  draw: () => void;\n  update: () => void;\n  reset: () => void;\n  constructor(\n    public ctx: CanvasRenderingContext2D,\n    public params: CircleParams\n  ) {\n    this.ctx = ctx;\n    this.originalParams = params;\n    this.params = params;\n    this.draw = () => {\n      let { o, r, v, a } = this.params as CircleParams;\n      const { origin, gridSize } = CanvasStore;\n\n      // change coordinate systems\n      o = {\n        x: (o.x + origin.x) * gridSize,\n        y: (origin.y - o.y) * gridSize,\n      };\n      r *= gridSize;\n      this.ctx.fillStyle = \"red\";\n      this.ctx.beginPath();\n      this.ctx.arc(o.x, o.y, r, 0, 2 * Math.PI);\n      this.ctx.fill();\n      this.ctx.closePath();\n    };\n    this.update = () => {\n      this.params.o.y -= 0.1;\n      this.draw();\n    };\n    this.reset = () => {\n      this.params = this.originalParams;\n    };\n  }\n}\n","import React, { useLayoutEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\n\ntype CanvasProps = {\n  className?: string;\n  width: number;\n  height: number;\n  origin: {\n    x: number;\n    y: number;\n  };\n  gridSize: number;\n};\n\nconst Canvas: React.FC<CanvasProps> = ({\n  className,\n  width,\n  height = 750,\n  origin = { x: 0, y: 0 },\n  gridSize = 25,\n}) => {\n  const axesCanvasRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useLayoutEffect(() => {\n    if (\n      !axesCanvasRef ||\n      !axesCanvasRef.current ||\n      !canvasRef ||\n      !canvasRef.current\n    )\n      return;\n    CanvasStore.setCanvas(canvasRef.current, axesCanvasRef.current);\n    const ctx = canvasRef.current.getContext(\"2d\");\n    const axesCtx = axesCanvasRef.current.getContext(\"2d\");\n    if (axesCtx && ctx) {\n      CanvasStore.setContext(ctx, axesCtx);\n      CanvasStore.addAxes(origin, gridSize);\n    }\n  }, [axesCanvasRef, canvasRef]);\n  return (\n    <div className={className}>\n      <canvas\n        className=\"body-canvas\"\n        width={width}\n        height={height}\n        ref={canvasRef}\n      />\n      <canvas\n        className=\"axes-canvas\"\n        width={width}\n        height={height}\n        style={{\n          border: \"1px solid black\",\n        }}\n        ref={axesCanvasRef}\n      />\n    </div>\n  );\n};\n\nexport default styled(Canvas)`\n  position: relative;\n  canvas {\n    position: absolute;\n  }\n`;\n","let id = 0;\nconst getUniqueId = (prefix: string) => `${prefix}-${id++}`;\n\nexport default getUniqueId;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport getUniqueId from \"../utils/getUniqueId\";\n\ntype InputType =\n  | \"x\"\n  | \"y\"\n  | \"w\"\n  | \"h\"\n  | \"r\"\n  | \"mass\"\n  | \"friction\"\n  | \"spring\"\n  | \"moment of inertia\";\n\ntype InputProps = {\n  className?: string;\n  placeholder?: string;\n  inputType: InputType;\n};\n\nconst Input: React.FC<InputProps> = ({ className, placeholder, inputType }) => {\n  const id = getUniqueId(\"input\");\n  const getLabel = () => {\n    switch (inputType) {\n      case \"w\":\n      case \"h\":\n      case \"r\":\n        return \"m\";\n      case \"mass\":\n        return \"kg\";\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <div className={className}>\n      <input id={id} placeholder={placeholder}></input>\n      <label htmlFor={id}>{getLabel()}</label>\n    </div>\n  );\n};\n\nexport default styled(Input)`\n  position: relative;\n  display: flex;\n  input {\n    width: 100%;\n    padding: 0 1.5rem 0 0.5rem;\n  }\n  label {\n    position: absolute;\n    top: 50%;\n    right: 0.5rem;\n    transform: translateY(-50%);\n    font-family: sans-serif;\n  }\n`;\n","import React, { useRef, useState } from \"react\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport { Canvas } from \"../components\";\nimport styled from \"styled-components\";\n\ntype CanvasContainerProps = {\n  className?: string;\n};\n\nconst CanvasContainer: React.FC<CanvasContainerProps> = ({ className }) => {\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const canvasProps = {\n    width: 750,\n    height: 750,\n    origin: {\n      x: 5,\n      y: 25,\n    },\n    gridSize: 25,\n  };\n\n  return (\n    <div id=\"canvas-container\" className={className} ref={canvasContainerRef}>\n      <Canvas {...canvasProps} />\n    </div>\n  );\n};\n\nexport default styled(CanvasContainer)`\n  width: 752px;\n  height: 752px;\n  overflow: hidden;\n  .btn-container {\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Input } from \"../components\";\n\ntype ToolsContainerProps = {\n  className?: string;\n};\n\nconst ToolsContainer: React.FC<ToolsContainerProps> = ({ className }) => {\n  return (\n    <div className={className}>\n      <div className=\"buttons-container\"></div>\n      <div className=\"inputs-container\">\n        <Input placeholder=\"x\" inputType=\"x\" />\n        <Input placeholder=\"y\" inputType=\"y\" />\n        <Input placeholder=\"width\" inputType=\"w\" />\n        <Input placeholder=\"height\" inputType=\"h\" />\n        <span></span>\n      </div>\n    </div>\n  );\n};\n\nexport default styled(ToolsContainer)`\n  margin-left: 1rem;\n  border: 1px solid #e9e9e9;\n  width: 20rem;\n  height: 752px;\n  padding: 1rem;\n  .inputs-container {\n    display: grid;\n    grid-gap: 0.5rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { act } from \"react-dom/test-utils\";\nimport styled from \"styled-components\";\nimport { CanvasStore, Rectangle, Circle } from \"../classes\";\nimport CanvasContainer from \"./CanvasContainer\";\nimport ToolsContainer from \"./ToolsContainer\";\n\ntype BodyContainerProps = {\n  className?: string;\n};\n\nconst BodyContainer: React.FC<BodyContainerProps> = ({ className }) => {\n  const [time, setTime] = useState(0);\n  const [active, setActive] = useState(false);\n  const onClick = () => {\n    const ctx = CanvasStore.ctx;\n    if (ctx) {\n      CanvasStore.addBody(\n        new Rectangle(ctx, {\n          x: 0,\n          y: 20,\n          w: 2,\n          h: 2,\n          m: 1,\n          v: { x: 0, y: 0 },\n          a: { x: 0, y: 0 },\n        })\n      );\n      // CanvasStore.addBody(\n      //   new Circle(ctx, {\n      //     o: {\n      //       x: 0,\n      //       y: 0,\n      //     },\n      //     r: 5,\n      //     v: { x: 0, y: 0 },\n      //     a: { x: 0, y: 0 },\n      //   })\n      // );\n    }\n  };\n  const onAnimate = () => {\n    CanvasStore.animate();\n    // setActive(true);\n  };\n  const onReset = () => {\n    CanvasStore.reset();\n    // setActive(false);\n    // setTime(0);\n  };\n  return (\n    <div className={className}>\n      <div className=\"top-container\">\n        <CanvasContainer />\n        <ToolsContainer />\n      </div>\n      <div className=\"btm-container\">\n        <button onClick={onClick}>Draw</button>\n        <button onClick={onAnimate}>Animate</button>\n        <button onClick={onReset}>Reset</button>\n      </div>\n      {/* <span className=\"timeer\">{time}s</span> */}\n    </div>\n  );\n};\n\nexport default styled(BodyContainer)`\n  display: flex;\n  flex-direction: column;\n  min-width: 1200px;\n  padding: 2rem;\n  .top-container {\n    display: flex;\n    justify-content: center;\n  }\n`;\n","import React from \"react\";\nimport { BodyContainer, ToolsContainer } from \"./containers\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BodyContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\n\nexport default combineReducers({});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./modules\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}